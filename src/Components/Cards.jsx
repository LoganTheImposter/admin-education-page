import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import './Cards.css';

const Cards = () => {
  const [cards, setCards] = useState([]);
  const [formData, setFormData] = useState({ title: '', detail: '' });
  const [file, setFile] = useState(null);
  const [editId, setEditId] = useState(null);
  const [showForm, setShowForm] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [selectedEmojiCategory, setSelectedEmojiCategory] = useState('smileys');

  const detailRef = useRef(null);

  useEffect(() => {
    fetchCards();
  }, []);

  const fetchCards = async () => {
    try {
      const response = await axios.get('http://13.238.142.81/education-api/cardread.php');
      setCards(response.data);
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î!', error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const formDataObj = new FormData();
    formDataObj.append('title', formData.title);
    formDataObj.append('detail', formData.detail);

    if (file) {
      formDataObj.append('file', file);
    }

    if (editId !== null) {
      formDataObj.append('id', editId);
      await axios.post('http://13.238.142.81/education-api/cardupdate.php', formDataObj, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
    } else {
      await axios.post('http://13.238.142.81/education-api/cardcreate.php', formDataObj, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
    }

    fetchCards();
    setFormData({ title: '', detail: '' });
    setFile(null);
    setEditId(null);
    setShowForm(false); // ‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πå‡∏î
  };

  const handleEdit = (card) => {
    setFormData({ title: card.title, detail: card.detail });
    setEditId(card.id);
    setShowForm(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  };

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ?');
    if (confirmDelete) {
      await axios.post('http://13.238.142.81/education-api/carddelete.php', { id });
      fetchCards();
    }
  };

  const toggleForm = () => {
    setShowForm(!showForm);
    setFormData({ title: '', detail: '' });
    setFile(null);
    setEditId(null);
  };

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile && (selectedFile.type === 'image/jpeg' || selectedFile.type === 'image/png')) {
      setFile(selectedFile);
    } else {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô .jpg ‡∏´‡∏£‡∏∑‡∏≠ .png ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    }
  };

  const insertText = (tag) => {
    const { detail } = formData;
    let updatedDetail;
    switch (tag) {
      case 'link':
        const linkText = prompt('‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå:');
        const url = prompt('‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå:');
        if (linkText && url) {
          updatedDetail = `${detail}<a href="${url}" target="_blank">${linkText}</a>`;
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ URL');
          return;
        }
        break;
      case 'emoji':
        setShowEmojiPicker(!showEmojiPicker);
        return;
      case 'bold':
        const boldText = prompt('‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏≤:');
        if (boldText) {
          updatedDetail = `${detail}<b>${boldText}</b>`;
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
          return;
        }
        break;
      case 'italic':
        const italicText = prompt('‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á:');
        if (italicText) {
          updatedDetail = `${detail}<i>${italicText}</i>`;
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
          return;
        }
        break;
      default:
        updatedDetail = detail;
    }
    setFormData({ ...formData, detail: updatedDetail });
  };

  const addEmoji = (emoji) => {
    const textarea = detailRef.current;
    const { selectionStart, selectionEnd } = textarea;
    const newText =
      formData.detail.slice(0, selectionStart) +
      emoji +
      formData.detail.slice(selectionEnd);

    setFormData({ ...formData, detail: newText });

    // Set cursor position after the emoji
    setTimeout(() => {
      textarea.setSelectionRange(selectionStart + emoji.length, selectionStart + emoji.length);
      textarea.focus();
    }, 0);
  };

  const emojiCategories = {
    smileys: ['üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò', 'üòó'],
    office: ['üé•','üì∏','üì∫','üì£','üì¢','üé§','üéß','üíº', 'üìé', 'üìä', 'üìà', 'üìâ', 'üìÖ', 'üìÜ', 'üóÇÔ∏è', 'üóÉÔ∏è', 'üñäÔ∏è', 'üéπ', 'üñåÔ∏è', 'üñçÔ∏è', 'üìù', 'üìå', 'üïë', 'üïí','üì•','üì§','üìß'],
    highlightemoji: ['üéì', 'üíØ', 'üé™', 'üé°', 'üéá', 'üéÅ', 'üéÄ', 'üéó', 'üéî', 'üéâ', 'üîÖ', 'üîΩ', 'üîº', 'üåü', 'üåû'],
    animals: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ'],
    foods: ['üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçí', 'ü•ù', 'üçë', 'ü•≠', 'üçç', 'ü••'],
    activities: ['‚öΩÔ∏è', 'üèÄ', 'üèà', '‚öæÔ∏è', 'üéæ', 'üèê', 'üèâ', 'üé±', 'üèì', 'üè∏', 'ü•Ö', 'üèí', 'üèè', 'üèë', 'ü•ç'],
    travel: ['üöó', '‚úàÔ∏è', 'üö¢', 'üöå', 'üö≤', 'üèçÔ∏è', 'üöÅ', 'üõ∂', 'üöÄ', 'üö°', 'üö†', 'üöû', 'üöù', 'üöÖ', 'üöÑ'],
    nature: ['üå≥', 'üå¥', 'üåµ', 'üåæ', 'üåø', 'üçÄ', 'üåº', 'üåª', 'üå∫', 'üå∑', 'üåπ', 'üå±', 'üå≤', 'üçÉ', 'üçÇ'],   
  };

  const handleCategoryChange = (category) => {
    setSelectedEmojiCategory(category);
  };

  return (
    <div className="container">
      <div className="header">
        <h2>‡∏Å‡∏≤‡∏£‡πå‡∏î</h2>
        <button className="add-card-btn" onClick={toggleForm}>
          {showForm ? '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î'}
        </button>
      </div>
      {showForm && (
        <form onSubmit={handleSubmit}>
          <label>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</label>
          <input
            type="file"
            accept=".jpg,.jpeg,.png"
            onChange={handleFileChange}
          />
          <label>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => setFormData({ ...formData, title: e.target.value })}
          />
          <div className="detail-label-toolbar">
            <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
            <div className="button-toolbar">
              <button type="button" onClick={() => insertText('link')} title="‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Ñ‡πå">üîó</button>
              <button type="button" onClick={() => insertText('emoji')} title="‡πÉ‡∏™‡πà‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥">üòä</button>
              <button type="button" onClick={() => insertText('bold')} title="‡πÉ‡∏™‡πà‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏ô‡∏≤">ùóï</button>
              <button type="button" onClick={() => insertText('italic')} title="‡πÉ‡∏™‡πà‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏≠‡∏µ‡∏¢‡∏á">ùòê</button>
            </div>
          </div>
          {showEmojiPicker && (
            <div className="emoji-picker">
              <div className="emoji-categories">
                {Object.keys(emojiCategories).map((category) => (
                  <button
                    type="button" // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
                    key={category}
                    className={`emoji-category-button ${selectedEmojiCategory === category ? 'active' : ''}`}
                    onClick={(e) => {
                      e.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
                      handleCategoryChange(category);
                    }}
                  >
                    {emojiCategories[category][0]}
                  </button>
                ))}
              </div>
              <div className="emoji-list">
                {emojiCategories[selectedEmojiCategory].map((emoji, index) => (
                  <button 
                    type="button" // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
                    key={index} 
                    onClick={(e) => {
                      e.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
                      addEmoji(emoji);
                    }}
                  >
                    {emoji}
                  </button>
                ))}
              </div>
            </div>
          )}
          <textarea
            ref={detailRef}
            placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
            value={formData.detail}
            onChange={(e) => setFormData({ ...formData, detail: e.target.value })}
            style={{ flexGrow: 1 }} // Make textarea expand to fill space
          />
          <button type="submit">{editId ? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' : '‡∏™‡∏£‡πâ‡∏≤‡∏á'}</button>
        </form>
      )}
      <ul>
        {cards.map((card) => (
          <li className="card" key={card.id}>
            <img src={`http://13.238.142.81/education-api/uploads/${card.imgSrc}`} alt={card.title} />
            <div className="card-content"> {/* ‡πÉ‡∏ä‡πâ class ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ */}
              <h3>{card.title}</h3>
              <div dangerouslySetInnerHTML={{ __html: card.detail }} />
            </div>
            <div className="button-group">
              <button onClick={() => handleEdit(card)}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
              <button onClick={() => handleDelete(card.id)}>‡∏•‡∏ö</button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default Cards;
