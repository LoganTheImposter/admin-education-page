import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import './EditNews.css';

function EditNews({ newsId, handleBackToNews, handleUpdateNews }) {
  const [newsData, setNewsData] = useState({
    id: '',
    title: '',
    detail: '',
    description: '',
    imgSrc: '',
    date: '',
    newskind: ''
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [newImgFiles, setNewImgFiles] = useState([]);
  const [newDescription, setNewDescription] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [selectedEmojiCategory, setSelectedEmojiCategory] = useState(null);
  const descriptionRef = useRef();

  useEffect(() => {
    axios.get(`http://13.238.142.81/education-api/fetchNews.php?id=${newsId}`)
      .then(response => {
        setNewsData(response.data);
        setNewDescription(response.data.description);
        setLoading(false);
      })
      .catch(error => {
        setError(error.message);
        setLoading(false);
      });
  }, [newsId]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewsData({ ...newsData, [name]: value });
  };

  const handleFileChange = (e) => {
    setNewImgFiles([...newImgFiles, ...Array.from(e.target.files)]);
};


  const handleRemoveImage = (imageName) => {
    setNewsData({
      ...newsData,
      imgSrc: newsData.imgSrc.split(',').filter(img => img !== imageName).join(',')
    });
  };

  const handleDescriptionAction = (action) => {
    let updatedDescription = newDescription;
    switch (action) {
      case 'link':
        const linkText = prompt('‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå:');
        const url = prompt('‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå:');
        if (linkText && url) {
          updatedDescription += ` <a href="${url}" target="_blank">${linkText}</a>`;
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ URL');
          return;
        }
        break;
      case 'bold':
        const boldText = prompt('‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏≤:');
        if (boldText) {
          updatedDescription += ` <b>${boldText}</b>`;
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
          return;
        }
        break;
      case 'italic':
        const italicText = prompt('‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á:');
        if (italicText) {
          updatedDescription += ` <i>${italicText}</i>`;
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
          return;
        }
        break;
      case 'emoji':
        setShowEmojiPicker(!showEmojiPicker);
        return;
      default:
        updatedDescription = newDescription;
    }
    setNewDescription(updatedDescription);
  };

  const addEmoji = (emoji) => {
    const textarea = descriptionRef.current;
    const { selectionStart, selectionEnd } = textarea;
    const newText =
      newDescription.slice(0, selectionStart) +
      emoji +
      newDescription.slice(selectionEnd);

    setNewDescription(newText);

    setTimeout(() => {
      textarea.setSelectionRange(selectionStart + emoji.length, selectionStart + emoji.length);
      textarea.focus();
    }, 0);
  };

  const emojiCategories = {
    smileys: ['üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò', 'üòó'],
    office: ['üé•', 'üì∏', 'üì∫', 'üì£', 'üì¢', 'üé§', 'üéß', 'üíº', 'üìé', 'üìä', 'üìà', 'üìâ', 'üìÖ', 'üìÜ', 'üóÇÔ∏è', 'üóÉÔ∏è', 'üñäÔ∏è', 'üéπ', 'üñåÔ∏è', 'üñçÔ∏è', 'üìù', 'üìå', 'üïë', 'üïí', 'üì•', 'üì§', 'üìß'],
    highlightemoji: ['üéì', 'üíØ', 'üé™', 'üé°', 'üéá', 'üéÅ', 'üéÄ', 'üéó', 'üéî', 'üéâ', 'üîÖ', 'üîΩ', 'üîº', 'üåü', 'üåû'],
    animals: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ'],
    foods: ['üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçí', 'ü•ù', 'üçë', 'ü•≠', 'üçç', 'ü••'],
    activities: ['‚öΩÔ∏è', 'üèÄ', 'üèà', '‚öæÔ∏è', 'üéæ', 'üèê', 'üèâ', 'üé±', 'üèì', 'üè∏', 'ü•Ö', 'üèí', 'üèè', 'üèë', 'ü•ç'],
    travel: ['üöó', '‚úàÔ∏è', 'üö¢', 'üöå', 'üö≤', 'üèçÔ∏è', 'üöÅ', 'üõ∂', 'üöÄ', 'üö°', 'üö†', 'üöû', 'üöù', 'üöÖ', 'üöÑ'],
    nature: ['üå≥', 'üå¥', 'üåµ', 'üåæ', 'üåø', 'üçÄ', 'üåº', 'üåª', 'üå∫', 'üå∑', 'üåπ', 'üå±', 'üå≤', 'üçÉ', 'üçÇ'],
  };

  const handleCategoryClick = (category) => {
    setSelectedEmojiCategory(category);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('id', newsData.id);
    formData.append('title', newsData.title);
    formData.append('detail', newsData.detail);
    formData.append('description', newDescription);
    formData.append('date', newsData.date);
    formData.append('newskind', newsData.newskind);
    formData.append('imgChanged', newImgFiles.length > 0 ? 1 : 0);
    formData.append('oldImgSrc', newsData.imgSrc); // ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢

    newImgFiles.forEach((file, index) => {
        formData.append(`imgFile${index}`, file);
    });

    axios.post('http://13.238.142.81/education-api/updateNews.php', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    })
    .then(response => {
        if (response.data.success) {
            handleUpdateNews(response.data.updatedNews);
        } else {
            setError(response.data.error || 'Error updating news.');
        }
    })
    .catch(error => {
        console.error('Error updating news:', error.message);
        setError('Error updating news: ' + error.message);
    });
};


  if (loading) return <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>;
  if (error) return <p>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</p>;

  return (
    <form onSubmit={handleSubmit} className="edit-news-form">
  <button type="button" className="close-button" onClick={handleBackToNews}>√ó</button>
  <div>
    <label>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß:</label>
    <input type="text" name="title" value={newsData.title} onChange={handleChange} />
  </div>
  <div>
    <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
    <input type="text" name="detail" value={newsData.detail} onChange={handleChange} />
  </div>
  <div>
    <label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:</label>
    <div className="description-actions">
      <button type="button" onClick={() => handleDescriptionAction('bold')}>B</button>
      <button type="button" onClick={() => handleDescriptionAction('italic')}>I</button>
      <button type="button" onClick={() => handleDescriptionAction('link')}>üîó</button>
      <button type="button" onClick={() => handleDescriptionAction('emoji')}>üòä</button>
    </div>
    {showEmojiPicker && (
      <div className="emoji-picker">
        <div className="emoji-categories">
          {Object.keys(emojiCategories).map(category => (
            <button
              key={category}
              onClick={() => handleCategoryClick(category)}
              className={selectedEmojiCategory === category ? 'active' : ''}
              type="button"  // Ensure this is type="button"
            >
              {emojiCategories[category][0]}
            </button>
          ))}
        </div>
        {selectedEmojiCategory && (
          <div className="emoji-list">
            {emojiCategories[selectedEmojiCategory].map(emoji => (
              <span key={emoji} onClick={() => addEmoji(emoji)}>{emoji}</span>
            ))}
          </div>
        )}
      </div>
    )}
    <textarea
      name="description"
      value={newDescription}
      onChange={(e) => setNewDescription(e.target.value)}
      ref={descriptionRef}
    />
  </div>
  <div>
    <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</label>
    <input type="date" name="date" value={newsData.date} onChange={handleChange} />
  </div>
  <div>
    <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πà‡∏≤‡∏ß:</label>
    <select name="newskind" value={newsData.newskind} onChange={handleChange}>
      <option value="1">‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå</option>
      <option value="2">‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏°‡∏ô‡∏≤</option>
      <option value="3">‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô</option> 
      <option value="4">‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á</option>
    </select>
  </div>
  <div>
    <label>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:</label>
    <input type="file" multiple onChange={handleFileChange} />
    <div className="current-images">
      {newsData.imgSrc.split(',').map((src, index) => (
        <div key={index} className="image-container">
          <img
            src={`http://13.238.142.81/education-api/uploads/${src.trim()}`}
            alt={`${newsData.title}-${index}`}
            className="edit-news-image"
          />
          <button type="button" onClick={() => handleRemoveImage(src)}>‡∏•‡∏ö</button>
        </div>
      ))}
    </div>
  </div>
  <button type="submit">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
</form>

  );
}

export default EditNews;
