import React, { useState, useRef } from 'react';
import axios from 'axios';
import './AddNews.css';

const AddNews = ({ handleBackToNews }) => {
  const [newsData, setNewsData] = useState([]);
  const [newImgFiles, setNewImgFiles] = useState([]);
  const [newTitle, setNewTitle] = useState('');
  const [newDetail, setNewDetail] = useState('');
  const [newDescription, setNewDescription] = useState('');
  const [newKind, setNewKind] = useState('1');
  const [errorMessage, setErrorMessage] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [selectedEmojiCategory, setSelectedEmojiCategory] = useState('smileys');
  const descriptionRef = useRef(null);

  const handleFormat = (formatType) => {
    let updatedDescription = newDescription;
    
    switch (formatType) {
      case 'link':
        const linkText = prompt('‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå:');
        const url = prompt('‡πÉ‡∏™‡πà URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡∏á‡∏Å‡πå:');
        if (linkText && url) {
          updatedDescription += ` <a href="${url}" target="_blank">${linkText}</a>`;
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ URL');
          return;
        }
        break;
      case 'bold':
        const boldText = prompt('‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏≤:');
        if (boldText) {
          updatedDescription += ` <b>${boldText}</b>`;
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
          return;
        }
        break;
      case 'italic':
        const italicText = prompt('‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏µ‡∏¢‡∏á:');
        if (italicText) {
          updatedDescription += ` <i>${italicText}</i>`;
        } else {
          alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
          return;
        }
        break;
      case 'emoji':
        setShowEmojiPicker(!showEmojiPicker);
        return;
      default:
        updatedDescription = newDescription;
    }
    setNewDescription(updatedDescription);
  };

  const addEmoji = (emoji) => {
    const textarea = descriptionRef.current;
    const { selectionStart, selectionEnd } = textarea;
    const newText =
      newDescription.slice(0, selectionStart) +
      emoji +
      newDescription.slice(selectionEnd);

    setNewDescription(newText);

    setTimeout(() => {
      textarea.setSelectionRange(selectionStart + emoji.length, selectionStart + emoji.length);
      textarea.focus();
    }, 0);
  };

  const emojiCategories = {
    smileys: ['üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò', 'üòó'],
    office: ['üé•','üì∏','üì∫','üì£','üì¢','üé§','üéß','üíº', 'üìé', 'üìä', 'üìà', 'üìâ', 'üìÖ', 'üìÜ', 'üóÇÔ∏è', 'üóÉÔ∏è', 'üñäÔ∏è', 'üéπ', 'üñåÔ∏è', 'üñçÔ∏è', 'üìù', 'üìå', 'üïë', 'üïí','üì•','üì§','üìß'],
    highlightemoji: ['üéì', 'üíØ', 'üé™', 'üé°', 'üéá', 'üéÅ', 'üéÄ', 'üéó', 'üéî', 'üéâ', 'üîÖ', 'üîΩ', 'üîº', 'üåü', 'üåû'],
    animals: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ'],
    foods: ['üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçí', 'ü•ù', 'üçë', 'ü•≠', 'üçç', 'ü••'],
    activities: ['‚öΩÔ∏è', 'üèÄ', 'üèà', '‚öæÔ∏è', 'üéæ', 'üèê', 'üèâ', 'üé±', 'üèì', 'üè∏', 'ü•Ö', 'üèí', 'üèè', 'üèë', 'ü•ç'],
    travel: ['üöó', '‚úàÔ∏è', 'üö¢', 'üöå', 'üö≤', 'üèçÔ∏è', 'üöÅ', 'üõ∂', 'üöÄ', 'üö°', 'üö†', 'üöû', 'üöù', 'üöÖ', 'üöÑ'],
    nature: ['üå≥', 'üå¥', 'üåµ', 'üåæ', 'üåø', 'üçÄ', 'üåº', 'üåª', 'üå∫', 'üå∑', 'üåπ', 'üå±', 'üå≤', 'üçÉ', 'üçÇ'],   
  };

  const addNews = async () => {
    if (newImgFiles.length === 0 || !newTitle || !newDetail || !newDescription) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á');
      return;
    }

    const formData = new FormData();
    Array.from(newImgFiles).forEach((file, index) => {
      formData.append(`imgFile[]`, file);
    });
    formData.append('title', newTitle);
    formData.append('detail', newDetail);
    formData.append('description', newDescription);
    formData.append('newskind', newKind);

    try {
      const response = await axios.post('http://13.238.142.81/education-api/admin/add_news.php', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      if (response.data.success) {
        setNewsData([...newsData, {
          imgSrc: response.data.imgSrc, 
          title: newTitle,
          detail: newDetail,
          description: newDescription,
          kind: newKind
        }]);
        setNewImgFiles([]);
        setNewTitle('');
        setNewDetail('');
        setNewDescription('');
        setNewKind('1'); 
        setErrorMessage('');
        handleBackToNews();
      } else {
        setErrorMessage(response.data.message);
      }
    } catch (error) {
      console.error('Error adding news: ', error);
      setErrorMessage('An error occurred while adding the news.');
    }
  };

  return (
    <div className="app">
      <button className="close-button" onClick={handleBackToNews}>√ó</button>
      <h1>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πà‡∏≤‡∏ß</h1>
      {errorMessage && <p className="error-message">{errorMessage}</p>}
      <form onSubmit={e => { e.preventDefault(); addNews(); }}>
        <div>
          <label>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:</label>
          <input
            type="file"
            multiple
            onChange={e => setNewImgFiles(e.target.files)}
          />
        </div>
        <div>
          <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πà‡∏≤‡∏ß:</label>
          <select
            value={newKind}
            onChange={e => setNewKind(e.target.value)}
          >
            <option value="1">‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå</option>
            <option value="2">‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏°‡∏ô‡∏≤</option>
            <option value="3">‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô</option>
            <option value="4">‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏á</option>
          </select>
        </div>
        <div>
          <label>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß:</label>
          <input
            type="text"
            value={newTitle}
            onChange={e => setNewTitle(e.target.value)}
          />
        </div>
        <div>
          <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
          <input
            type="text" 
            value={newDetail}
            onChange={e => setNewDetail(e.target.value)}
          />
        </div>
        <div className="editor-buttons">
          <button type="button" onClick={() => handleFormat('bold')} title="Bold"><b>B</b></button>
          <button type="button" onClick={() => handleFormat('italic')} title="Italic"><i>I</i></button>
          <button type="button" onClick={() => handleFormat('link')} title="Link">üîó</button>
          <button type="button" onClick={() => handleFormat('emoji')} title="Emoji">üòä</button>
        </div>
        {showEmojiPicker && (
          <div>
            <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà Emoji:</label>
            <div className="emoji-category-buttons">
              {Object.keys(emojiCategories).map(category => (
                <button
                  key={category}
                  type="button"
                  onClick={() => setSelectedEmojiCategory(category)}
                  className={selectedEmojiCategory === category ? 'active' : ''}
                  title={category.charAt(0).toUpperCase() + category.slice(1)}
                >
                  {emojiCategories[category][0]}
                </button>
              ))}
            </div>
            <div className="emoji-picker">
              {emojiCategories[selectedEmojiCategory].map(emoji => (
                <span key={emoji} className="emoji" onClick={() => addEmoji(emoji)}>
                  {emoji}
                </span>
              ))}
            </div>
          </div>
        )}
        <div>
          <label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:</label>
          <textarea
            ref={descriptionRef}
            value={newDescription}
            onChange={e => setNewDescription(e.target.value)}
          ></textarea>
        </div>
        <button type="submit">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πà‡∏≤‡∏ß</button>
      </form>
    </div>
  );
};

export default AddNews;
